# Local search Algorithm

- 중간과정을 관찰할 수 있다. => 중간결과를 표현(시각화 등)할 수 있음
	- 식사하는 철학자 문제 => Queue => 공유자원 할당 문제
	- 생산자 / 소비자 문제 => DeQueue => 공항 활주로 착륙

# 상속 구조?
- 의존성이 너무 높아지므로 선호되지 않는다.
- 따라서 인터페이스 중심으로 설계를 진행합니다.

# Python과 JS는 관례가 중요하다.

# Local Search(언덕등반)
- TSP, N-Queen => 좌표 => 조합론
- 수식(방정식) => 경사하강법(미분)
- 경사하강법은 느리다.

# 확률적 경사하강법
- 기능을 적당히 구현해서 보여주는 데 목적이 있다.
	=> 완결성 => 작은 프레임워크 만들기.

# SpringBoot + OAuth2

# 비용함수 == 손실함수
# activation에는 비선형함수만 올 수 있다. 

# sigmoid - 선 임의로 휘게 하기 가능.
# relu - 음수는 0, 시간나면 다른것도 써보기.
# leaky ReLU - 현업

# 4칸 그리기
# train.loss / train.accuracy
# test.loss / test.accuracy

## (global) search
### local search
- TSP, N-Queen(그래프) => 정답이 있음! 
	=> 경사하강법은 못씀
	=> 유전 알고리즘
- 적절한 답안을 제시함.('적절한 = 알고리즘이 찾은것 중에서는 좋은')
	=> 언덕 알고리즘

