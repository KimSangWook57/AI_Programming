개발자의 미덕?

1-1. 입력을 미니배치 형태로 나눌 수 있어야 한다!
=> 리스트를 배우자(행렬)
=> Numpy Array로 변환(리스트 => 행렬)
=> 행렬 연산을 사용할 수 있음(Numpy)
=> 행렬을 텐서로 변경할 수 있음(TF)

2-1. '뭘' 학습하는가?
=> 기울기
=> 절편
2-2. 애초에 학습과 훈련은 뭐가 다른가?
=> 학습은 주체적이다. -> 모델이 데이터를 학습
=> 훈련은 주체적이지 않다. -> 개발자가 모델을 훈련시켜서 결과로 기울기와 절편이 나오게 하는 것이다.
=> 뭘로 이루어졌나? -> 모델! -> pkl

3. 작게 반복적으로 기록을 남기세요...

4. PC 1대에서 해라...
-> 도커 쓸꺼니? 할줄아니?
-> JPA 쓸꺼니? MySQL 쓸꺼니? -> SQLite나 써라...

5. 텐서 계산이 뭐임?
=> 텐서를 계산하는 이유가 뭐임? -> '텐서 계산 그래프'

////////////////////////////////////////////////////
AI 프로그래밍 정리
- 언덕 등반 알고리즘(min, max) => 지역 검색
    - 전역 검색이 결과가 월등히 좋음(시간이 3억년 정도 있다면 말이지...)
    - 지역 최적화는 보장
    - 알고리즘에 "제약"이 필요하다.

- TSP와 N-Queen => 유전 알고리즘이 더 낫다.
    - 전역 알고리즘 => BF(브루트포스? 흠...)

- 경사하강법
    - 영상처리, 음성처리, 딥러닝, 시계열
    - 모든 결과물은 "행렬로 된" "기울기와 절편"
    - 수치가 아닌 것에는 쓸 수가 없다...

# 머신러닝 / 딥러닝
0. 팀빌딩

1. Epoch == 1(1주 안에 끝내라, 길어도 2주다)
- 데이터 분석가(1번 만들고 개선하기)
    - 문제를 정의하고 가설을 설립
    - 전처리, 머신러닝, 딥러닝
    - 모델도 생성 (1주 내로)
    - 홈페이지도 만들기 (무료 사이트에 올릴 수 있게 하기)

- 개발자(2명)
    - 백엔드는 모델을 호출해서 REST API를 생성한다.
        - 깃헙에 도커 걸고?
    - 프론트엔드는 사용자 입력을 받고, 시각화한다.
        - 만드는 홈페이지는 기본적으로 깃헙io 형태처럼 심플하게.(Next.js)

- 협업 문제
    - 문서는 동시 작성이 가능한 것을 선택(될 수 있으면 문서는 깔끔하게 - 나 뭐 했다.)
    - 해당 문서로 절대로 포트폴리오를 쓰지 않는다.
    - 니 포트폴리오는 홈페이지로 나와야 할 것이다.
    - 깃헙을 쓸꺼면 확실히 쓰든지, 아니면 다 없애라.
        - Epoch 3~4까지는 차례차례(branch), 데일리 압축
        - github cpython

2. Epoch == 3(1주) 데이터 분석가들...
    - 기존 데이터를 이용해서 성능 향상
    - 형편없다고 다른 데이터 추가하지 마라
    - 독립변수 변경, 종속변수 변경, 알고리즘 변경 (일주일 내내 해보고 뭐가 제일 좋을지 봐라.)
- BE는 스키마랑 기타 API 확정
- FE는 UI/UX 확정

3. Epoch == 5(중간점검)
- 수정사항, 건의사항 확인. 중간점검 받고 수정해라...

4. 최종 Epoch == 7~9, 5 이후로는 반복이다.
- 7주차 이후에 딥러닝 쓸 수 있으면 쓰세요.

> 데이터 분석가들에게...

1. 전처리 너무 빡세게 하지마라 -> 모든 전처리는 BE, FE의 코딩을 동반한다.
    - 사용자가 flask에 무언가를 넣으면...자바와 파이썬 등등 모든 것이 값을 맟춰야 할 것이다.
    - Epoch == 5까지는 NA값 지워라.
    - 무조건 XGBoost로 합니다. (독립변수와 종속변수를 찾아내기 위해서라도!)

2. 시각화는 반드시 "내부 구성원"용으로 사용하세요.
    - FE랑 협의하세요.
    - 시각화한 내용을 찍어서 포트폴리오로 사용하세요. 
        - 플라스크에 리액트 붙이기 참고.

3. 모델 배포는 REST로 하세요.
    - TFLite 파일 자체는 java에서 읽을 순 있지만, 기술이 필요하다.
    - spring의 asset에 모델을 올릴 수도 있다.
    - 로딩 가능하면 파일 배포도 같이 하자.
    - TFLite를 사용해서 이진파일을 로딩할 수 없다면?

