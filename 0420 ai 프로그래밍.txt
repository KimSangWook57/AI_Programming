결제모드 달아보기(백) / rpc 호출하기(프론트)
네이버 / 카카오 API는 각 기업의 SDK를 사용해야 함.

Local Search
- 언덕 등반 알고리즘 => 지역
- First-Choice 알고리즘 => TSP => 시각화
- steepset => 경사하강법 => 수식 => 시각화

- 길찾기 알고리즘 => 트리를 이용한 충돌 방지

뭐부터 먼저 할까?
- 안 쓸 것부터 먼저 배제

promise, async, await / while문 회사에서 쓰지 마라!
=> 자바는 for each 구문으로 객체를 stream으로 해라.
=> stream으로 인덱스 조작은 힘드니까 가능한 한 자제해라.

마음 속에 매개변수를 몇 개 쓸지 정해야 한다.

tf flatten - 펼쳐준다.

- First는 지역 내 전역 => 계산이 느리다
- GD => 계산이 빠름(뺄셈) => 수식

미분은 연속체(field) = 연속에서만 가능.
컴퓨터는 이산시스템(연속이 아님)
=> 컴퓨터는 가산기(덧셈만 가능)
=> 수치미분(뺄셈!)

# 델타 t - 미분계수(기울기)
# x로 나누면? => 길이가 나온다.

# 문제 - 좌표가 없음 / 차수가 너무 많음. => 편미분

4, [4, 4,] 4
TSP를 시각화로 보자 => 뭐가 되는데? 
=> 목표 1. 일단 뭐라도 화면에 띄우기 
	- 설정
	- 화면에 뭐라도 나오게 해라.
-> 격자?(4 * 2 그리드 격자)
	- 아무튼 4분할로 띄웠다!
=> 목표 2. TSP 문제를 만들어서 화면에 출력하는 것.
	- TSP 문제를 어떻게 만들까?
		- (좌표) 30개 만들면 될듯?  
	- 선이랑 점을 그려야 한다.
		- 애니메이션?
	- 알고리즘
		- BF(브루트 포스) 

thymeleaf, three.js, pygame
(GettingStarted)에서 구성 확인.
파이어베이스 위치? 
.env?

# 좌표를 알아야지!
게임의 0.0 => 천차만별. (좌상단, 좌하단, 중간...)
리액트의 0.0 => 브라우저의 좌상단

AWS_KEY를 깃허브에 올리지 마라.

모르겠으면 리스트, 세부내용은 딕셔너리

데이터는 JSON, 형식은 딕셔너리, DB키는 딕셔너리키.